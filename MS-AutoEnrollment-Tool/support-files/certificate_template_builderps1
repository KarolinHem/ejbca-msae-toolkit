Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName Microsoft.VisualBasic
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

#The powershell modules included with Windows Server Remote Server Administration Tools are necessary to query LDAP Certificate template containers
#NEED ERROR HANLDING
Write-Host "Checking to see if the AD CS Managmement tool is installed..." -ForegroundColor Yellow
$rsatAdcsInstalled = Get-WindowsFeature -Name RSAT-ADCS | Select-Object InstallState
    
if($rsatAdcsInstalled.InstallState -ne 'Installed'){

    Write-Host "Installing the AD DS and LDS tool..." -ForegroundColor Yellow

    try{
        
        Install-WindowsFeature -Name RSAT-ADCS-Mgmt -ErrorAction Stop Sucessfully
        Write-Host "The AD DS and LDS tool successfully installed..." -ForegroundColor Yellow
        
        }
        catch {
        [System.Windows.Forms.Messagebox]::Show("The AD CS Manamagement tool DID NOT successfully install!`n

    You need to manually install the tool using Server Manager and run the script again. The script will now exit.")
        
        Exit
        }
    }   

#Build domain DN variable
$domainDN = (Get-ADDomain).DistinguishedName 

#Load DN into ADSI
$ADSI = [ADSI]"LDAP://CN=Certificate Templates,CN=Public Key Services, CN=Services, CN=Configuration, $domainDN"

 #Query container for existing certificate templates
$existingCertificateTemplates = foreach($template in $ADSI.Children){
    $template.name
    }

$existingCertificateTemplatesNull = [string]::IsNullOrEmpty($existingCertificateTemplates) 

if($existingCertificateTemplatesNull -eq $true){

    Write-Host "Installing default certificate templates in LDAP..." -ForegroundColor Yellow

    try{
        
        $installDefaultTemplatesArgs = "-installdefaulttemplates"
        Start-Process 'certutil.exe' -ArgumentList $installDefaultTemplatesArgs -Wait -PassThru -ErrorAction Stop
        Write-Host "Default certificate templates successfully installed..." -ForegroundColor Yellow
        
        }
        catch {
        [System.Windows.Forms.Messagebox]::Show("The default certificate templates did not install due to a lack of permissions!`n

You need to use an account with permissions to write to the CN=Certificate Templates,CN=Public Key Services,CN=Services container")
        
        Exit
        }

}

$NewTempl = $ADSI.Create("pKICertificateTemplate", "CN=SystemHealthAuthentication6") 
$NewTempl.put("distinguishedName","CN=SystemHealthAuthentication6,CN=Certificate Templates,CN=Public Key Services,CN=Services,$domainDN") 
# and put other atributes that you need 

$NewTempl.put("flags","131680")
$NewTempl.put("displayName","System Health Authentication6")
$NewTempl.put("revision","100")
$NewTempl.put("pKIDefaultKeySpec","1")
$NewTempl.SetInfo()

$NewTempl.put("pKIMaxIssuingDepth","0")
$NewTempl.put("pKICriticalExtensions","2.5.29.15")
$NewTempl.put("pKIExtendedKeyUsage","1.3.6.1.4.1.311.47.1.1, 1.3.6.1.5.5.7.3.2")
$NewTempl.put("pKIDefaultCSPs","1,Microsoft RSA SChannel Cryptographic Provider")
$NewTempl.put("msPKI-RA-Signature","0")
$NewTempl.put("msPKI-Enrollment-Flag","32")
$NewTempl.put("msPKI-Private-Key-Flag","67371264")
$NewTempl.put("msPKI-Certificate-Name-Flag","134217728")
$NewTempl.put("msPKI-Minimal-Key-Size","2048")
$NewTempl.put("msPKI-Template-Schema-Version","4")
$NewTempl.put("msPKI-Template-Minor-Revision","0")
$NewTempl.put("msPKI-Cert-Template-OID","1.3.6.1.4.1.311.21.8.7638725.13898300.1985460.3383425.7519116.119.16408497.1716 293")
$NewTempl.put("msPKI-Certificate-Application-Policy","1.3.6.1.4.1.311.47.1.1, 1.3.6.1.5.5.7.3.2")

$NewTempl.SetInfo()

$WATempl = $ADSI.psbase.children | where {$_.displayName -match "Workstation Authentication"}

#before
$NewTempl.pKIKeyUsage = $WATempl.pKIKeyUsage
$NewTempl.pKIExpirationPeriod = $WATempl.pKIExpirationPeriod
$NewTempl.pKIOverlapPeriod = $WATempl.pKIOverlapPeriod
$NewTempl.SetInfo()

$NewTempl | select *

#get current ACL and show it if you need to check. If not leave it.
$acl = $NewTempl.psbase.ObjectSecurity
$acl | select -ExpandProperty access

#Set new
$AdObj = New-Object System.Security.Principal.NTAccount("<group name>")
$identity = $AdObj.Translate([System.Security.Principal.SecurityIdentifier])
$adRights = "ExtendedRight"
$type = "Allow"

$ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule($identity,$adRights,$type)
$NewTempl.psbase.ObjectSecurity.SetAccessRule($ACE)
$NewTempl.psbase.commitchanges()